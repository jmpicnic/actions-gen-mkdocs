---
name: action-build-mkdocs
description: Reusable Action to generate mkdocs.
inputs:
  docs-dir:
    description: |
      Directory where the mkdocs.yml and requirements.txt file are expected to be and from where the content directory can be accessed (as configured in mkdocs.yml)
    default: "."
  site-target-dir:
    description: |
      Directory where the site is to be generated, **RELATIVE TO `docs-dir`**
    default: "./site"
  requirements-file-name:
    description: The name of the Python requirements file relative to docs-dir
    default: "requirements.txt"
  mkdocs-file-name:
    description: "The name of the mkdocs config file relative to docs-dir"
    default: "mkdocs.yml"
  for-techdocs:
    description: Whether the generation is intended to be used with techdocs-cli to publish to Backstage
    default: "True"
  python-version:
    description: The version of Python to use
    default: "3.12"
outputs:
  generated-site:
    description: The directory where the generated site is placed
    value: ${{ steps.setup-paths.outputs.site-output-dir }}
runs:
  using: composite
  steps:
    - name: Set up paths
      id: setup-paths
      shell: bash
      run: |
        echo $PATH
        set -x
        OUT_DIR=`realpath ${{ inputs.docs-dir }}/${{ inputs.site-target-dir }}`
        echo "site-output-dir=$OUT_DIR" >> "$GITHUB_OUTPUT"
        REAL_REQ_PATH=`realpath ${{ inputs.docs-dir }}/${{ inputs.requirements-file-name }}`
        echo "requirements-file=$REAL_REQ_PATH" >> "$GITHUB_OUTPUT"
        MKDOCS_PATH=`realpath ${{ inputs.docs-dir }}/${{ inputs.mkdocs-file-name }}`
        echo "mkdocs-file=$MKDOCS_PATH" >> "$GITHUB_OUTPUT"
    - name: Install Ubuntu Packages
      id: install-ubuntu-packages
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        version: 1.0
        packages: graphviz texlive pandoc pandoc-citeproc ghostscript tree
        # execute_install_scripts: true
    - name: Install Java
      id: install-java
      uses: actions/setup-java@v3
      with:
        distribution: corretto
        java-version: '21'
    # - name: get the latest plantuml
    #   id: get-plantuml
    #   shell: bash
    #   run: |
    #     set -x
    #     wget -q https://github.com/plantuml/plantuml/releases/download/v1.2025.4/plantuml-1.2025.4.jar -O plantuml.jar
    # - name: Check dot installation
    #   id: check-dot
    #   shell: bash
    #   run: |
    #     sudo apt install -y graphviz
    #     set -x
    #     set +e
    #     echo $PATH
    #     dpkg -s graphviz
    #     which dot
    #     DOT_CHECK=$?
    #     echo "DOT EXIT: $DOT_CHECK"
    #     sudo dot -c
    #     SDOT_CHECK=$?
    #     echo "DOT -c EXIT: $SDOT_CHECK"
    #     java -Djava.awt.headless=true -jar plantuml.jar -testdot
    #     JAVA_DOT_CHECK=$?
    #     echo "Java CHECK EXIT: $JAVA_DOT_CHECK"
    #     set -e
    #     if [ $DOT_CHECK -ne 0 ] || [ $SDOT_CHECK -ne 0 ] || [ $JAVA_DOT_CHECK -ne 0 ]; then
    #       echo "::error title=Graphviz dot not installed::Please install Graphviz dot to use this action."
    #       exit 1
    #     fi
    - name: Echo Python
      id: echo-python
      shell: bash
      run: |
        set -x
        echo "Python version: ${{ inputs.python-version }}"
    - name: Install Python
      id: install-python
      # Using setup-python@v4 to ensure Python is installed and pip is set up correctly
      # This action also supports caching pip dependencies
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: pip
        cache-dependency-path: ${{ steps.setup-paths.outputs.requirements-file }}
    - name: Upgrade pip & install from ${{ steps.setup-paths.outputs.requirements-file }}
      id: install-pip
      if: steps.install-python.outputs.python-version == inputs.python-version
      # Using bash shell to ensure compatibility with the rest of the script
      shell: bash
      run: |
        set -x
        python3 -m pip install --upgrade pip
        python3 -m pip install -r ${{ steps.setup-paths.outputs.requirements-file }}
#        python3 -m pip install pypandoc
#        python3 -c "from pypandoc.pandoc_download import download_pandoc;download_pandoc()"
    - name: Check Versions
      id: check-versions
      shell: bash
      run: |
        set -x
        lsb_release -a
        python --version
        java --version
        mkdocs --version
        pandoc --version
        echo -n "ghostscript: "
        gs --version
        latex --version
        dot -V
        java -Djava.awt.headless=true -jar plantuml.jar -version
    - name: Run Mkdocs
      id: run-mkdocs
      shell: bash
      run: |
        set -x
        export PATH="$PWD:$PATH"
        echo "==== Running with"
        echo "==> PATH: $PATH"
        echo "==> MKDOCS_FILE: ${{ steps.setup-paths.outputs.mkdocs-file }}"
        echo "==> SITE_DIR: ${{ steps.setup-paths.outputs.site-output-dir }}"
        mkdocs build -s --config-file "${{ steps.setup-paths.outputs.mkdocs-file }}" --site-dir ${{ inputs.site-target-dir }}
    - name: Fix permissions
      id: fix-permissions
      shell: bash
      run: |
        set -x
        chmod -c -R +rX ${{ steps.setup-paths.outputs.site-output-dir }} | while read line; do
          echo "::warning title=Invalid file permissions automatically fixed::$line"
        done
    - name: Generate Tech-docs metadata
      id: gen-techdocs-metadata
      if: |
        inputs.for-techdocs == 'true' || inputs.for-techdocs == 'True'
          || inputs.for-techdocs == 'yes' || inputs.for-techdocs == 'Yes'
      shell: bash
      run: |
        set -x
        sudo wget -qO yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x yq
        ./yq -oj eval '{"site_description" : .site_description, "site_name" : .site_name}' \
        "${{ steps.setup-paths.outputs.mkdocs-file }}" > \
        "${{ steps.setup-paths.outputs.site-output-dir }}/techdocs_metadata.json"
